apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: dynamic-disk-volume
spec:
  amiFamily: AL2023
  amiSelectorTerms:
  - alias: al2023@v20250715 # Amazon Linux 2023
  role: "<<KARPENTER_NODE_IAM_ROLE_NAME>>"
  securityGroupSelectorTerms:
  - tags:
      karpenter.sh/discovery: "<<CLUSTER_NAME>>"
  subnetSelectorTerms:
  - tags:
      karpenter.sh/discovery: "<<CLUSTER_NAME>>"
  metadataOptions:
    httpEndpoint: enabled
    httpTokens: required
    httpPutResponseHopLimit: 1
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 20Gi
        volumeType: gp3
        deleteOnTermination: true
        encrypted: true
  userData: |
    #!/bin/bash
    set -e

    get_imds_token() {
        curl -X PUT "http://169.254.169.254/latest/api/token" \
            -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" \
            --max-time 10 --retry 3
    }

    get_metadata() {
        local path=$1
        local token=$2
        curl -H "X-aws-ec2-metadata-token: $token" \
            "http://169.254.169.254/latest/meta-data/$path" \
            --max-time 10 --retry 3
    }

    # Get target size based on instance size suffix
    get_target_size_by_suffix() {
        local instance_type=$1
        local size_suffix=$(echo $instance_type | sed 's/.*\.//')

        case $size_suffix in
            nano)
                echo 20
                ;;
            micro)
                echo 30
                ;;
            small)
                echo 40
                ;;
            medium)
                echo 60
                ;;
            large)
                echo 100
                ;;
            xlarge)
                echo 200
                ;;
            2xlarge)
                echo 300
                ;;
            3xlarge)
                echo 400
                ;;
            4xlarge)
                echo 500
                ;;
            6xlarge)
                echo 600
                ;;
            8xlarge|9xlarge)
                echo 800
                ;;
            12xlarge)
                echo 1000
                ;;
            16xlarge|18xlarge)
                echo 1200
                ;;
            24xlarge)
                echo 1500
                ;;
            32xlarge|48xlarge|56xlarge|112xlarge)
                echo 2000
                ;;
            metal)
                echo 1000  # Bare metal instances
                ;;
            *)
                echo 100   # Default for unknown sizes
                ;;
        esac
    }

    resize_ebs_for_instance() {
        local device="/dev/xvda"

        local token=$(get_imds_token)
        if [ -z "$token" ]; then
            echo "Failed to get IMDSv2 token"
            return 1
        fi

        local instance_id=$(get_metadata "instance-id" "$token")
        local region=$(get_metadata "placement/region" "$token")
        local instance_type=$(get_metadata "instance-type" "$token")

        if [ -z "$instance_id" ] || [ -z "$region" ] || [ -z "$instance_type" ]; then
            echo "Failed to get required metadata"
            return 1
        fi

        # Get target size based on instance suffix
        local target_size=$(get_target_size_by_suffix "$instance_type")
        local size_suffix=$(echo $instance_type | sed 's/.*\.//')

        echo "Instance: $instance_type (suffix: $size_suffix) -> Target: ${target_size}GB"

        local volume_id=$(aws ec2 describe-instances --instance-ids $instance_id \
            --query 'Reservations[0].Instances[0].BlockDeviceMappings[?DeviceName==`'$device'`].Ebs.VolumeId' \
            --output text --region $region)

        if [ -z "$volume_id" ] || [ "$volume_id" = "None" ]; then
            echo "Error: Could not find volume for device $device"
            return 1
        fi

        local current_size=$(aws ec2 describe-volumes --volume-ids $volume_id \
            --query 'Volumes[0].Size' --output text --region $region)

        if [ "$current_size" -ge "$target_size" ]; then
            echo "Volume already correct size (${current_size}GB)"
            return 0
        fi

        echo "Resizing volume from ${current_size}GB to ${target_size}GB"
        aws ec2 modify-volume --volume-id $volume_id --size $target_size --region $region

        # Wait for completion with timeout
        local timeout=300
        local elapsed=0
        while [ $elapsed -lt $timeout ]; do
            local state=$(aws ec2 describe-volumes-modifications --volume-ids $volume_id \
                --query 'VolumesModifications[0].ModificationState' --output text --region $region)

            if [[ "$state" = "completed" || "$state" = "optimizing" ]]; then
                echo "Volume modification completed"
                break
            elif [ "$state" = "failed" ]; then
                echo "Volume modification failed"
                return 1
            fi

            sleep 5
            elapsed=$((elapsed + 5))
        done

        if [ $elapsed -ge $timeout ]; then
            echo "Timeout waiting for volume modification"
            return 1
        fi

        # Extend partition and filesystem
        growpart $device 1 || {
            echo "Failed to extend partition"
            return 1
        }

        # Detect filesystem and resize
        local fs_type=$(lsblk -f ${device}1 | tail -1 | awk '{print $2}')
        case $fs_type in
            xfs)
                xfs_growfs / || {
                    echo "Failed to resize XFS filesystem"
                    return 1
                }
                ;;
            ext4)
                resize2fs ${device}1 || {
                    echo "Failed to resize ext4 filesystem"
                    return 1
                }
                ;;
            *)
                echo "Unsupported filesystem: $fs_type"
                return 1
                ;;
        esac

        echo "EBS resize completed successfully"
        return 0
    }

    # Execute resize
    if ! resize_ebs_for_instance; then
        echo "EBS resize failed, continuing with bootstrap"
    fi

    # AL2023 bootstrap
    /usr/bin/nodeadm init
---
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: dynamic-disk-volume
spec:
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 1m
  limits:
    cpu: 1k
    memory: 500Gi
  template:
    metadata:
      labels:
        intent: dynamic-disk-volume
    spec:
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: dynamic-disk-volume
      requirements:
      - key: karpenter.sh/capacity-type
        operator: In
        values:
        - spot
        - on-demand
      - key: kubernetes.io/os
        operator: In
        values:
        - linux
      - key: kubernetes.io/arch
        operator: In
        values:
        - amd64
      - key: karpenter.k8s.aws/instance-category
        operator: In
        values:
        - c
        - m
        - r